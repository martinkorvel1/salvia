import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { UserInfo } from '../../../types/SalviaUser'
import { RootState } from '../../store'
import { runQualweb } from './qualwebAPI'
import { v4 as uuidv4 } from 'uuid'
import { saveSalviaTestCase } from '../salvia/salviaAPI'
import { StatReport, Viewport } from '../../../types/SalviaTest'
import { storeQualwebReport } from '../report/reportAPI'
import { map, merge, omit } from 'rambda'
import { modifyPageReport } from '../../../components/utils'

export interface QualwebState {
  value: number
  results: string[]
  status: 'idle' | 'loading' | 'ready'
  response: 'ok' | 'failed' | undefined
  result: unknown //{}
}

const initialState: QualwebState = {
  value: 0,
  results: [],
  status: 'idle',
  response: undefined,
  result: {},
}

interface QualwebParameters {
  domain: string
  urls: string[]
  viewport: Viewport
  user: UserInfo | undefined
}

export const createTest = createAsyncThunk(
  'qualweb/createTest',
  async (qualwebParameters: QualwebParameters) => {
    const { domain, urls, viewport, user } = qualwebParameters

    //process in batches of 10
    const batchSize = 10
    const batchCnt = Math.ceil(urls.length / batchSize)

    const qualwebResponse = await Promise.all(
      Array.from(Array(batchCnt).keys()).map((i) => {
        const batch: string[] = urls.slice(i * batchSize, i * batchSize + batchSize)
        return runQualweb(domain, batch, viewport)
      }),
    )

    const qualwebResult = qualwebResponse
      .map((item) => item.data)
          .reduce((acc, value) => merge(acc, value))

    const modifiedReport = modifyPageReport(qualwebResult)

    const storeResponse = await storeQualwebReport(uuidv4(), modifiedReport)

    const statReport: Record<string, StatReport> = map(
      (item) => omit(['modules'], item),
      qualwebResult,
    )

    const response = await saveSalviaTestCase(domain, storeResponse.id, statReport, viewport, user)

    return response;
  },
)

export const qualwebSlice = createSlice({
  name: 'qualweb',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    //reset state to initial state
    resetQualweb: () => initialState,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createTest.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(createTest.fulfilled, (state, action) => {
        state.status = 'ready'
        state.response = 'ok'
        state.result = action.payload
      })
      .addCase(createTest.rejected, (state) => {
        state.status = 'ready'
        state.response = 'failed'
      })
  },
})

export const { resetQualweb } = qualwebSlice.actions

export const selectResponse = (state: RootState) => state.qualweb.response
export const selectStatus = (state: RootState) => state.qualweb.status
export const selectResult = (state: RootState) => state.qualweb.result

export default qualwebSlice.reducer
