import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState } from '../../store'
import fileDownload from 'js-file-download'
import { getPdfReport, getQualwebReport } from './reportAPI'

export interface ReportState {
  jsonReport: unknown //{},
  status: 'idle' | 'loading' | 'ready'
  response: 'ok' | 'failed' | undefined
  showDownloadModal: boolean
  showErrorModal: boolean
}

const initialState: ReportState = {
  jsonReport: {},
  status: 'idle',
  response: undefined,
  showDownloadModal: false,
  showErrorModal: false,
}

interface ReportParameters {
  type: 'json' | 'pdf'
  id: number
  reportName: string
  reportId: string
  language?: string //"en-US" | "fi-FI" | "se-SE"
}

const removeKey = (key: string, obj: object) => {
    Object.keys(obj).forEach(i => {
        if (i === key) {
            // @ts-ignore
            delete obj[i];
        } else { // @ts-ignore
            if (typeof obj[i] === 'object') {
                        // @ts-ignore
                        removeKey(key, obj[i]);
                    }
        }
    });
};


export const getTestReport = createAsyncThunk(
  'report/getTestReport',
  async ({ /*id*/reportName, reportId }: ReportParameters) => {
    let response

 
    if (reportId !== '') {
        response = await getQualwebReport(reportId);
        // @ts-ignore
        removeKey('dom', response.data);
        // @ts-ignore
        removeKey('elements', response.data);
        // @ts-ignore
        removeKey('metadata', response.data);
        fileDownload(new Blob([JSON.stringify(response.data, null, 2)]), reportName)

    }

    

    return response
  },
)

export const getPDFReport = createAsyncThunk(
  'report/getPDFReport',
  async ({ id, reportName, language, type, reportId }: ReportParameters) => {
    const response = await getPdfReport(id, language, type, reportId)
    fileDownload(response, reportName)
    return id
  },
)

export const getJSONTestReport = createAsyncThunk(
  'report/getJSONTestReport',
  async ({ id, reportName, language, type, reportId }: ReportParameters) => {
    const response = await getPdfReport(id, language, type, reportId)
    fileDownload(response, reportName)

    return id
  },
)

export const reportSlice = createSlice({
  name: 'report',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    showDownloadModal: (state, action: PayloadAction<boolean>) => {
      state.showDownloadModal = action.payload
    },
    showErrorModal: (state, action: PayloadAction<boolean>) => {
      state.showErrorModal = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTestReport.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(getTestReport.fulfilled, (state, action) => {
        state.status = 'ready'
        state.jsonReport = action.payload
      })
      .addCase(getPDFReport.pending, (state) => {
        state.status = 'loading'
        state.showDownloadModal = true
      })
      .addCase(getPDFReport.fulfilled, (state) => {
        state.status = 'ready'
        state.showDownloadModal = false
        state.response = 'ok'
      })
      .addCase(getJSONTestReport.pending, (state) => {
        state.status = 'loading'
        state.showDownloadModal = true
      })
      .addCase(getJSONTestReport.fulfilled, (state) => {
        state.status = 'ready'
        state.showDownloadModal = false
        state.response = 'ok'
      })
      .addCase(getPDFReport.rejected, (state) => {
        state.status = 'ready'
        state.response = 'failed'
        state.showDownloadModal = false
        state.showErrorModal = true
      })
      .addCase(getJSONTestReport.rejected, (state) => {
        state.status = 'ready'
        state.response = 'failed'
        state.showDownloadModal = false
        state.showErrorModal = true
      })
      .addCase(getTestReport.rejected, (state) => {
        state.status = 'ready'
        state.response = 'failed'
        state.showErrorModal = true
      })
  },
})

export const { showDownloadModal, showErrorModal } = reportSlice.actions

export const selectResponse = (state: RootState) => state.report.response
export const selectStatus = (state: RootState) => state.report.status
export const selectReport = (state: RootState) => state.report.jsonReport
export const selectShowDownloadModal = (state: RootState) => state.report.showDownloadModal
export const selectShowErrorModal = (state: RootState) => state.report.showErrorModal

export default reportSlice.reducer
